// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Appointment{
  id                String    @unique @default(cuid())
  name              String    // nome do paciente
  email             String
  phone             String 
  time              String    // hora do agendamento
  appointmentData   DateTime  // data do Agendamento
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  userId            String
  user              User      @relation(fields: [userId], references: [id])

  serviceId         String
  service           Services  @relation(fields: [serviceId], references: [id])
}


model Reminder{
  id              String @unique @default(cuid())
  description     String
  //just for dates view
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  //relacionamento com o USER
  userId String
  user User @relation(fields: [userId], references: [id])
}


model Services {
  id              String @unique @default(cuid())
  name            String
  price           Int
  description     String
  duaration       Int 
  status          Boolean @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // um serviço pode ter varios agendamentos 
  appointments Appointment[]

  //Relação com o USER  
  userId          String
  user User       @relation(fields: [userId], references: [id])
}

enum Plan {
  BASIC
  PRO
  ENTERPRISE
}

model Subscription{
  id                String @id @default(cuid())
  status            String
  plan              Plan
  priceId           String

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Referencia de um Subscription para um User
  userId            String @unique
  user User         @relation(fields: [userId], references: [id])

}

model User {
  id                      String          @id @default(cuid())
  name                    String?
  email                   String          @unique
  emailVerified           DateTime?
  image                   String?
  address                 String?         @default("")
  phone                   String?         @default("")
  status                  Boolean?        @default(true)
  timeZone                String?
  stripe_customer_id      String?
  accounts                Account[]
  sessions                Session[]
  
  subscription Subscription? // relacionamento user pode ter apenas uma subscription
  reminders Reminder[]  //relacionamento com os Reminders "NOTAS"
  services Services[] //relacionamento para de um User para varios services
  Appointments Appointment[] // Relacionamento de um User para varios Appointments "Agendamentos" 
  Authenticator Authenticator[] // Optional for WebAuthn support

  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String                @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String         @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}